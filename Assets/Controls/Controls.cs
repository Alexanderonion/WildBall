//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.6.3
//     from Assets/Controls/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @ControlsScript: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @ControlsScript()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""KeyBoard"",
            ""id"": ""95293afd-0e42-4cb2-b162-a10c1cdb39ff"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""ba7e535a-563b-4e88-ae40-ef09d64c625c"",
                    ""expectedControlType"": ""Vector3"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Axiliration"",
                    ""type"": ""Button"",
                    ""id"": ""298d4246-74e7-4817-94a1-22559c677583"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Action"",
                    ""type"": ""Button"",
                    ""id"": ""ef2ba956-3919-4bc1-b7a5-7f41cc543b16"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""PauseOnOff"",
                    ""type"": ""Button"",
                    ""id"": ""1c7faab2-1c01-4707-8752-5f20866e79b9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""09a552be-269e-4083-8d84-dbf8f29b339e"",
                    ""path"": ""<Keyboard>/leftShift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Axiliration"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6a9f524d-ed86-487d-af22-2fe77c1e5d53"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Action"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e65cc72c-f75f-454f-b24f-0d3f247471b3"",
                    ""path"": ""<Keyboard>/p"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""PauseOnOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD 3D Vector"",
                    ""id"": ""b5738132-623b-41cf-9099-61cf37ffe5ba"",
                    ""path"": ""3DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""1f56c8f7-2c71-44f4-9550-e5d829d82f11"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""44b35b81-aa67-4ffe-a886-854cf29f7f2c"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Forward"",
                    ""id"": ""93b8b316-6c28-4639-b78b-081ec6e244b6"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Backward"",
                    ""id"": ""2eac79ec-63e4-49bb-a24a-52ef857f1cd4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""PC"",
            ""bindingGroup"": ""PC"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // KeyBoard
        m_KeyBoard = asset.FindActionMap("KeyBoard", throwIfNotFound: true);
        m_KeyBoard_Move = m_KeyBoard.FindAction("Move", throwIfNotFound: true);
        m_KeyBoard_Axiliration = m_KeyBoard.FindAction("Axiliration", throwIfNotFound: true);
        m_KeyBoard_Action = m_KeyBoard.FindAction("Action", throwIfNotFound: true);
        m_KeyBoard_PauseOnOff = m_KeyBoard.FindAction("PauseOnOff", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // KeyBoard
    private readonly InputActionMap m_KeyBoard;
    private List<IKeyBoardActions> m_KeyBoardActionsCallbackInterfaces = new List<IKeyBoardActions>();
    private readonly InputAction m_KeyBoard_Move;
    private readonly InputAction m_KeyBoard_Axiliration;
    private readonly InputAction m_KeyBoard_Action;
    private readonly InputAction m_KeyBoard_PauseOnOff;
    public struct KeyBoardActions
    {
        private @ControlsScript m_Wrapper;
        public KeyBoardActions(@ControlsScript wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_KeyBoard_Move;
        public InputAction @Axiliration => m_Wrapper.m_KeyBoard_Axiliration;
        public InputAction @Action => m_Wrapper.m_KeyBoard_Action;
        public InputAction @PauseOnOff => m_Wrapper.m_KeyBoard_PauseOnOff;
        public InputActionMap Get() { return m_Wrapper.m_KeyBoard; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(KeyBoardActions set) { return set.Get(); }
        public void AddCallbacks(IKeyBoardActions instance)
        {
            if (instance == null || m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Axiliration.started += instance.OnAxiliration;
            @Axiliration.performed += instance.OnAxiliration;
            @Axiliration.canceled += instance.OnAxiliration;
            @Action.started += instance.OnAction;
            @Action.performed += instance.OnAction;
            @Action.canceled += instance.OnAction;
            @PauseOnOff.started += instance.OnPauseOnOff;
            @PauseOnOff.performed += instance.OnPauseOnOff;
            @PauseOnOff.canceled += instance.OnPauseOnOff;
        }

        private void UnregisterCallbacks(IKeyBoardActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Axiliration.started -= instance.OnAxiliration;
            @Axiliration.performed -= instance.OnAxiliration;
            @Axiliration.canceled -= instance.OnAxiliration;
            @Action.started -= instance.OnAction;
            @Action.performed -= instance.OnAction;
            @Action.canceled -= instance.OnAction;
            @PauseOnOff.started -= instance.OnPauseOnOff;
            @PauseOnOff.performed -= instance.OnPauseOnOff;
            @PauseOnOff.canceled -= instance.OnPauseOnOff;
        }

        public void RemoveCallbacks(IKeyBoardActions instance)
        {
            if (m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IKeyBoardActions instance)
        {
            foreach (var item in m_Wrapper.m_KeyBoardActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_KeyBoardActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public KeyBoardActions @KeyBoard => new KeyBoardActions(this);
    private int m_PCSchemeIndex = -1;
    public InputControlScheme PCScheme
    {
        get
        {
            if (m_PCSchemeIndex == -1) m_PCSchemeIndex = asset.FindControlSchemeIndex("PC");
            return asset.controlSchemes[m_PCSchemeIndex];
        }
    }
    public interface IKeyBoardActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnAxiliration(InputAction.CallbackContext context);
        void OnAction(InputAction.CallbackContext context);
        void OnPauseOnOff(InputAction.CallbackContext context);
    }
}
